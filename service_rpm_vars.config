%% -*- mode: erlang -*-
{{=<% %>=}}% ------------------ Package Naming Section --------------------------
%% These are variables which control the naming of the final package,
%% in general leaving these as the release name and version from the
%% relx part of the rebar.config is fine.

%% The name of the generated rpm, by default we'll just use the release name
%% from the relx config
{package_name, "{{release_name}}"}.

%% The version of the generated rpm, by default we'll just use the release
%% version.
{package_version, "{{release_version}}"}.

%% The iteration is essentially the build number, this will default to 1
%% but can be overridden by a environment variable REBAR3_BUILD_RPM_BUILD_NUMBER
{package_iteration, "1"}.

%% ----------------- Installed Service Section ------------------------
%% NOTE: this section needs to come before some parts of the Package Info
%%       section because templating appear to occur in file order
%%
%% These control the names of the installed service.  For the most part
%% leaving them the same as the package_name is fine if the package name
%% is short and alphanumeric (as users and groups will be created.

%% this will be the name used when you run the 'service' script
{package_service_name, "{{package_name}}"}.

%% this is the username used to run the service
{package_service_user, "{{package_name}}"}.

<%={{ }}=%>
%% this is the long name used when creating a user to run the service
{package_service_user_description, "{{author_name}}"}.
{{=<% %>=}}

%% this is the group used to run the service
{package_service_group, "{{package_name}}"}.

%% -------------------- Package Info Section --------------------------
%% These are mostly just so that rpm -i shows some useful information
%% except for dependencies which might be important

<%={{ }}=%>
%% the maintainer of the package
{package_maintainer, "{{author_name}} <{{author_email}}>" }.
{{=<% %>=}}

%% a url, ideally to the source of the package
{package_url, "TODO : ADD URL FOR YOUR GIT REPO HERE"}.

%% a short summary of what the package does
{package_summary, "TODO : Add a short description about this package"}.

%% a longer description of the package
{package_description, "TODO: Add a longer and more expository description "
                      "of the package"}.

%% a package vendor if appropriate
{package_vendor, "OpenX, Incorporated"}.

%% a package license if appropriate
{package_license, "Proprietary"}.

%% The install prefix, the erlang release tar will be put under the
%% package name, under this directory.  The leading slash should be
%% left off.
{package_prefix, "usr/lib64"}.

%% overrides change the user and group for particular files, in this case
%% we change the ownership of the HOME and log directories
{package_permission_overrides,
   "{{package_service_user}}:{{package_service_group}}/var/run/{{package_service_name}},"
   "{{package_service_user}}:{{package_service_group}}/var/log/{{package_service_name}}"
}.

%% this is the place for external (e.g. non-erlang) package dependencies.
%% these will become requirements of the generated rpm
%% an example
%%   {package_depends, "rrdtool < 1.6.0,rrdtool-perl < 1.6.0"}.
{package_depends, ""}.

%% sometimes you don't want a directory represented in a package because it's a
%% shared directory (for instance /usr/bin).  If you leave this as an empty
%% string or remove it, rebar3_build_rpm will attempt to calculate shared paths
%% by removing any paths which don't contain the release name or the service
%% name.  If you define a list here, that list is used instead.
%%
%% For example
%%   { package_excludes,
%%     "etc/init.d,etc/supervisord.d,etc/systemd,etc/systemd/system,usr/bin,usr/lib64,var/lib,var/log,var/run"
%%  }.
%%
%% Note that the above is a single string of ',' separated directories with the
%% leading '/' removed.
{package_excludes, ""}.
<%={{ }}=%>
